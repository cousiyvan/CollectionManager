@*
    For more information on enabling MVC for empty projects, visit http://go.microsoft.com/fwlink/?LinkID=397860
*@
@model List<CollectionManager.Models.Collection.Game>
@using CollectionManager.Models.Collection;
@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager

<div class="MySearchGamesContainer">
    <h2>Search results</h2>
    <div class="container-fluid">
        @for (var i = 0; i < Model.Count; i += 2)
        {
        <!-- @Html.Raw(i % 2 == 0 ? "<div class='row'>": "") -->
            <div class="row custom-row">
                <div class="poster col-md-3 col col-xs-6">
                    <p>
                        <a asp-action="Games" asp-controller="Collection" asp-route-id="@Model[i].Id" class="thumbnail">
                            <img style="width:50%;" src="@Model[i].Poster" />
                        </a>
                    </p>
                    @await Html.PartialAsync("_AddCollectionHelper", Model[i])
                </div>
                <div class="information col-md-3 col">
                    <p class="title">@Model[i].Title</p>
                    <p class="release-date">
                        @foreach (var k in Model[i].ReleaseDate.Keys)
                {
                            @: @k -  @Model[i].ReleaseDate[k].ToString("d")
                        }
                    </p>
                    @if (!string.IsNullOrEmpty(Model[i].Storyline))
                {
                    int length = (Model[i].Storyline.Length > (int)ViewData["SummaryMaxCharacters"]) ? (int)ViewData["SummaryMaxCharacters"] : Model[i].Storyline.Length;
                        <p class="summary"><h4>Description:</h4> @Model[i].Storyline.Substring(0, length) <text>...</text></p>
                    }
                    else if (!string.IsNullOrEmpty(Model[i].Description))
                    {
                        int length = (Model[i].Description.Length > (int)ViewData["SummaryMaxCharacters"]) ? (int)ViewData["SummaryMaxCharacters"] : Model[i].Description.Length;
                        <p class="summary"><h4>Description:</h4> @Model[i].Description.Substring(0, length) <text>...</text></p>
                    }
                    <p class="keywords">
                        <h4>Keywords:</h4>
                        @foreach (var k in Model[i].Keywords)
                {
                            @:  @k
                        }
                    </p>
                </div>

                @if ((i + 1) < Model.Count)
                {
                    <div class="poster col-md-3 col">
                        <p>
                            <a asp-action="Games" asp-controller="Collection" asp-route-id="@Model[i+1].Id" class="thumbnail">
                                <img style="width:50%;" src="@Model[i+1].Poster" />
                            </a>
                        </p>
                        @await Html.PartialAsync("_AddCollectionHelper", Model[i + 1])
                    </div>
                    <div class="information col-md-3 col">
                        <p class="title">@Model[i + 1].Title</p>
                        <p class="release-date">
                            @foreach (var k in Model[i + 1].ReleaseDate.Keys)
                    {
                                @: @k -  @Model[i + 1].ReleaseDate[k].ToString("d")
                        }
                        </p>
                        @if (!string.IsNullOrEmpty(Model[i + 1].Storyline))
                        {
                            int length = (Model[i + 1].Storyline.Length > (int)ViewData["SummaryMaxCharacters"]) ? (int)ViewData["SummaryMaxCharacters"] : Model[i + 1].Storyline.Length;
                            <p class="summary"><h4>Description:</h4> @Model[i + 1].Storyline.Substring(0, length) <text>...</text></p>
                        }
                        else if (!string.IsNullOrEmpty(Model[i + 1].Description))
                        {
                            int length = (Model[i + 1].Description.Length > (int)ViewData["SummaryMaxCharacters"]) ? (int)ViewData["SummaryMaxCharacters"] : Model[i + 1].Description.Length;
                            <p class="summary"><h4>Description:</h4> @Model[i + 1].Description.Substring(0, length) <text>...</text></p>
                        }
                        <p class="keywords">
                            <h4>Keywords:</h4>
                            @foreach (var k in Model[i + 1].Keywords)
                    {
                                @: @k
                    }
                        </p>
                    </div>
                }
                <!-- @Html.Raw(i % 2 == 0 ? "</div>" : "") -->
            </div>
        }
    </div>
</div>
