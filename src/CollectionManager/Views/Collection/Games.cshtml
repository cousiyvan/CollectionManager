@model List<CollectionManager.Models.Collection.Game>
@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager
@{
    ViewData["Title"] = "Games";
}

@if (SignInManager.IsSignedIn(User))
{
    <h2>My collection</h2>
    @Html.Raw(Json.Serialize(ViewData["MyCollectionGames"]));
}

<h2>Latest releases</h2>
<div class="container-fluid">
    @for (var i = 0; i < Model.Count; i+=2)
    {
        <!-- @Html.Raw(i % 2 == 0 ? "<div class='row'>": "") -->
        <div class="row custom-row">
            <div class="poster col-md-3 col">
                <p>
                    <a asp-action="Games" asp-controller="Collection" asp-route-id="@Model[i].Id">
                        <img style="width:50%;" src="@Model[i].Poster" />
                    </a>
                </p>
                @await Html.PartialAsync("_AddCollectionHelper", Model[i])
            </div>
            <div class="information col-md-3 col">
                <p class="title">@Model[i].Title</p>
                <p class="release-date">
                    @foreach (var k in Model[i].ReleaseDate.Keys)
                    {
                        @: @k -  @Model[i].ReleaseDate[k].ToString("d")
                        }
                </p>
                @if (!string.IsNullOrEmpty(Model[i].Storyline))
                {
                    int length = (Model[i].Storyline.Length > (int)ViewData["SummaryMaxCharacters"])? (int)ViewData["SummaryMaxCharacters"]:Model[i].Storyline.Length;
                    <p class="summary"><h4>Description:</h4> @Model[i].Storyline.Substring(0, length) <text>...</text></p>
                }
                else if (!string.IsNullOrEmpty(Model[i].Description))
                {
                    int length = (Model[i].Description.Length > (int)ViewData["SummaryMaxCharacters"]) ? (int)ViewData["SummaryMaxCharacters"] : Model[i].Description.Length;
                    <p class="summary"><h4>Description:</h4> @Model[i].Description.Substring(0, length) <text>...</text></p>
                }
                <p class="keywords">
                    <h4>Keywords:</h4>
                    @foreach (var k in Model[i].Keywords)
                    {
                        @:  @k
                        }
                </p>
            </div>

            @if ((i+1) < Model.Count)
            {
            <div class="poster col-md-3 col">
                <p>
                    <a asp-action="Games" asp-controller="Collection" asp-route-id="@Model[i+1].Id">
                        <img style="width:50%;" src="@Model[i+1].Poster" />
                    </a>
                </p>
                @await Html.PartialAsync("_AddCollectionHelper", Model[i+1])
            </div>
            <div class="information col-md-3 col">
                <p class="title">@Model[i + 1].Title</p>
                <p class="release-date">
                    @foreach (var k in Model[i + 1].ReleaseDate.Keys)
                    {
                        @: @k -  @Model[i + 1].ReleaseDate[k].ToString("d")
                        }
                </p>
                @if (!string.IsNullOrEmpty(Model[i + 1].Storyline))
                {
                    int length = (Model[i + 1].Storyline.Length > (int)ViewData["SummaryMaxCharacters"]) ? (int)ViewData["SummaryMaxCharacters"] : Model[i + 1].Storyline.Length;
                    <p class="summary"><h4>Description:</h4> @Model[i + 1].Storyline.Substring(0, length) <text>...</text></p>
                }
                else if (!string.IsNullOrEmpty(Model[i + 1].Description))
                {
                    int length = (Model[i + 1].Description.Length > (int)ViewData["SummaryMaxCharacters"]) ? (int)ViewData["SummaryMaxCharacters"] : Model[i + 1].Description.Length;
                    <p class="summary"><h4>Description:</h4> @Model[i + 1].Description.Substring(0, length) <text>...</text></p>
                }
                <p class="keywords">
                    <h4>Keywords:</h4>
                    @foreach (var k in Model[i + 1].Keywords)
                    {
                        @: @k
                    }
                </p>
            </div>
            }
            <!-- @Html.Raw(i % 2 == 0 ? "</div>" : "") -->
        </div>
}
</div>
<div class="previous-next">
    @{ 
        int offset = (int)ViewData["offset"];
        int count = (int)ViewData["count"];
        int maxPages = (int)ViewData["MaxPages"];
        int maxElements = (int)ViewData["MaxElements"];
        int currentPage = 0;
        if (ViewData["CurrentPage"] != null) {
            currentPage = (int)ViewData["CurrentPage"];
        }
        int previous = (offset - maxElements < 0) ? offset = 0 : offset - maxElements;
    }
    @if (offset != 0)
    {
        @Html.ActionLink("First ", "Games", "Collection", new { offset = 0 }, null);
        @Html.ActionLink("Previous", "Games", "Collection", new { offset = previous, currentPage = currentPage - 1 }, null);
        }

        @for (int i = offset+maxElements, j=currentPage+1, k=0;i<(count/4) && k < maxPages;i+=maxElements, j++, k++)
        {
            @Html.ActionLink(j.ToString(), "Games", "Collection", new { offset = i, currentPage = j }, null);
            @Html.Raw(" ");
        }

        @if (count > 4 && offset * 4 < count)
        {
            @Html.ActionLink("Next", "Games", "Collection", new { offset = offset+maxElements, currentPage = currentPage + 1 }, null);
            @*@Html.ActionLink(" Last", "Games", "Collection", new { offset = count-4 }, null);*@
        }
</div>